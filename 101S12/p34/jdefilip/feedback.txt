Student: jdefilip
Assignment: p34
Date: 2012-05-09 09:50:30.185139
Grade: 4

Your is_palindrome function has an interestig line of logic. Here it is, with a unnecessary parens removed:
if ( ( the_string[start_char] == the_string[end_char] )     ||
       ( the_string[start_char] == the_string[end_char - 1] ) )
        return 1;

The first part checks if the outermost characters are the same. Fine. The second part checks the second-to-last character against the first.

So if the input is "abcab" it will say that YES this is a palindrome. Even if the outermost characters match, the next action should be to recurse on the middle substring, sans those outer characters. This is the recursive case, not a base case.

There are three cases you need to handle, and you are missing one:
Case 1: There is 1 or 0 characters in the substring, return YES
Case 2: The outer two characters do NOT match, return NO
Case 3: The outer two characers do match, return the result of the recurse.

========== p34.c ==========
/***************************************/ 
/* Author: James DeFilippo             */ 
/* Program 34: Palindrome Detector     */ 
/* Approximate Time: 30 minutes        */ 
/***************************************/ 

#include <stdio.h>
#include <string.h>


int is_palindrome( char* the_string , int start_char , int end_char );

int main ( int argc, char* argv[] ) 
{
  char string[20]; 
  int start_letter; 
  int end_letter; 
  int x; 
  printf( "Hi! Please enter a sequence of characters for palindrome detection. " ); 
  scanf( "%s", string ); 
  start_letter = 0; 
  end_letter = strlen ( string ); 
  x = is_palindrome ( string, start_letter, end_letter ); 
  if ( x == 1 )
    printf( "The word is a palindrome.\n" ); 
  if ( x == 0 ) 
     printf( "The word is not a palindrome.\n" ); 
  return 0; 

}

int is_palindrome( char* the_string , int start_char , int end_char ) {
  
  if ((( the_string[start_char] )  == ( the_string[end_char] )) || (( the_string[start_char] ) == ( the_string[end_char - 1] )))
	return 1; 
     else 
	return 0; 
  return is_palindrome( the_string, start_char + 1, end_char - 1 );
} 

